const jsonServer = require('json-server');
const server = jsonServer.create();
const middlewares = jsonServer.defaults();
server.use(middlewares);
let base_url = '/sound/';
const WaveFile = require('wavefile');
let wav = require('node-wav');
server.use(middlewares);

server.listen(3000, () => {
    console.log('JSON Server is running')
});


server.get(base_url + 'wav', (req, res) => {
    //let status = createWav(req.query);
    if ('name' in req.query) {
        let s = getSamples(req.query.name);
        res.jsonp({res: s});
    }
    /*
    if (status)
        res.jsonp({res: 'Ok'});
    else
        res.jsonp({res: 'Fallido'});

     */
});

function getSamples(name) {
    let fs  = require('fs');
    let path = '/home/alan/Descargas/' + name + '.wav';
    let path1 = '../js/sample.wav';
    let buffer = fs.readFileSync(path1);
    let result = wav.decode(buffer);
    console.log(result.sampleRate);
    //console.log(result.channelData);
    //let wav = new WaveFile(fs.readFile(path1));
    //let samples = [];
    let count = 0;
    /*
    while (count < 20){
        console.log(wav.getSample(count));
        samples.push(wav.getSample(count));
    }

     */
    return result.channelData
}

function createWav(values) {
    //let data = [0.2859225237459672, 0.2859225237459672, 0.2859225237459672, 0.2495166536099278, 0.2495166536099278, 0.2495166536099278, 0.28372782326139545, 0.28372782326139545, 0.28372782326139545, 0.174939963006615, 0.174939963006615, 0.23992689002042528, 0.23992689002042528, 0.23992689002042528, 0.16665812442630634, 0.16665812442630634, 0.16665812442630634, 0.09640345607559671, 0.09640345607559671, 0.09640345607559671, 0.05733892605461649, 0.05733892605461649, 0.05733892605461649, 0.06824446110507422, 0.06824446110507422, 0.07852200329572498, 0.07852200329572498, 0.07852200329572498, 0.11009060558886812, 0.11009060558886812, 0.11009060558886812, 0.09442768572189661, 0.09442768572189661, 0.09442768572189661, 0.1354020916456755, 0.1354020916456755, 0.1354020916456755, 0.10918640892916547, 0.10918640892916547, 0.05861024840441289, 0.05861024840441289, 0.05861024840441289, 0.09315346715290623, 0.09315346715290623, 0.09315346715290623, 0.04052232502739339, 0.04052232502739339, 0.04052232502739339, 0.04086479061578561, 0.04086479061578561, 0.04086479061578561, 0.04974983035696353, 0.04974983035696353, 0.06550730017790113, 0.06550730017790113, 0.06550730017790113, 0.08331744079396722, 0.08331744079396722, 0.08331744079396722, 0.0997279968342613, 0.0997279968342613, 0.0997279968342613, 0.08220300360732948, 0.08220300360732948, 0.06816786029808536, 0.06816786029808536, 0.06816786029808536, 0.0955077036450791, 0.0955077036450791, 0.0955077036450791, 0.03138764329763476, 0.03138764329763476, 0.03138764329763476, 0.3927885229788403, 0.3927885229788403, 0.3927885229788403, 0.18554046391715198, 0.18554046391715198, 0.06857967188695374, 0.06857967188695374, 0.06857967188695374, 0.05141823619374471, 0.05141823619374471, 0.05141823619374471, 0.06023326538358331, 0.06023326538358331, 0.06023326538358331, 0.06724420848652894, 0.06724420848652894, 0.2975427333301963, 0.2975427333301963, 0.2975427333301963, 0.08148186094067648, 0.08148186094067648, 0.08148186094067648, 0.08170001115953818, 0.08170001115953818, 0.08170001115953818, 0.04657488949771431, 0.04657488949771431, 0.04657488949771431, 0.046433276346903474, 0.046433276346903474, 0.04362168159414437, 0.04362168159414437, 0.04362168159414437, 0.040079241169456194, 0.040079241169456194, 0.040079241169456194, 0.04814683393683036, 0.04814683393683036, 0.04814683393683036, 0.040738390267199734, 0.040738390267199734, 0.040738390267199734, 0.051082670065493746, 0.051082670065493746, 0.31280097716484045, 0.31280097716484045, 0.31280097716484045, 0.13121740953534605, 0.13121740953534605, 0.13121740953534605, 0.07883261705827059, 0.07883261705827059, 0.07883261705827059, 0.13113249589993764, 0.13113249589993764, 0.09164250244067233, 0.09164250244067233, 0.09164250244067233, 0.05587144331988553, 0.05587144331988553, 0.05587144331988553, 0.04469041582233064, 0.04469041582233064, 0.04469041582233064, 0.030302883126617018, 0.030302883126617018, 0.030302883126617018, 0.03774335118486087, 0.03774335118486087, 0.03774335118486087, 0.03678046895145147, 0.03678046895145147, 0.44835268996621935, 0.44835268996621935, 0.44835268996621935, 0.15464976042341044, 0.15464976042341044, 0.15464976042341044, 0.07040319093548596, 0.07040319093548596, 0.07040319093548596, 0.06559366354331249, 0.06559366354331249, 0.04173119556710264, 0.04173119556710264, 0.04173119556710264, 0.04967647113037013, 0.04967647113037013, 0.04967647113037013, 0.05497822352646041, 0.05497822352646041, 0.05497822352646041, 0.041915411098652, 0.041915411098652, 0.04623545918556622, 0.04623545918556622, 0.04623545918556622, 0.04121055238539739, 0.04121055238539739, 0.04121055238539739, 0.05123794141662559, 0.05123794141662559, 0.05123794141662559, 0.05441543165969307, 0.05441543165969307, 0.05441543165969307, 0.06568112593811848]
    let data = JSON.parse(values.seq);
    let wav = new WaveFile();
    let fs  = require('fs');
    wav.fromScratch(2, 60, '64', [data, data]);
    fs.writeFileSync('../sounds/' + values.name + '.wav', wav.toBuffer());
    return true;
}